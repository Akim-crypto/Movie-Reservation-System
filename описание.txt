Сделаю потом через докер запуск

-- use films;

CREATE TABLE IF NOT EXISTS genres (
  id CHAR(36) NOT NULL PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS movies (
  id CHAR(36) NOT NULL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  poster_url VARCHAR(500),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS movie_genres (
  movie_id CHAR(36) NOT NULL,
  genre_id CHAR(36) NOT NULL,
  PRIMARY KEY (movie_id, genre_id),
  CONSTRAINT fk_mg_movie FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE,
  CONSTRAINT fk_mg_genre FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE RESTRICT
);

-- Optional: insert a couple of genres with fixed UUIDs (so you can test)
INSERT INTO genres (id, name, description)
VALUES
  ('00000000-0000-0000-0000-000000000101','Action','Action movies'),
  ('00000000-0000-0000-0000-000000000102','Comedy','Comedy movies'),
  ('00000000-0000-0000-0000-000000000103','Drama','Drama movies')
ON DUPLICATE KEY UPDATE name = VALUES(name);



-- Таблица ролей пользователей (админ, пользователь и т.д.)
CREATE TABLE roles (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Таблица пользователей
CREATE TABLE users (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  role_id CHAR(36),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (role_id) REFERENCES roles(id)
);

-- Таблица жанров
CREATE TABLE genres (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Таблица фильмов
CREATE TABLE movies (
  id CHAR(36) PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  poster_url VARCHAR(500),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Связка фильмов и жанров (многие-ко-многим)
CREATE TABLE movie_genres (
  movie_id CHAR(36) NOT NULL,
  genre_id CHAR(36) NOT NULL,
  PRIMARY KEY (movie_id, genre_id),
  FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE,
  FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE RESTRICT
);

-- Таблица залов (аудиторий)
CREATE TABLE auditoriums (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  capacity INT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Таблица моделей сидений (обычные, VIP)
CREATE TABLE seat_models (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  text VARCHAR(100),
  is_vip BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Таблица сидений в аудиториях
CREATE TABLE auditorium_seats (
  id CHAR(36) PRIMARY KEY,
  auditorium_id CHAR(36) NOT NULL,
  seat_model_id CHAR(36) NOT NULL,
  seat_number VARCHAR(10) NOT NULL,
  role_label VARCHAR(10),
  FOREIGN KEY (auditorium_id) REFERENCES auditoriums(id) ON DELETE CASCADE,
  FOREIGN KEY (seat_model_id) REFERENCES seat_models(id) ON DELETE RESTRICT
);

-- Таблица сеансов (showtimes)
CREATE TABLE showtimes (
  id CHAR(36) PRIMARY KEY,
  movie_id CHAR(36) NOT NULL,
  auditorium_id CHAR(36) NOT NULL,
  start_time DATETIME NOT NULL,
  end_time DATETIME NOT NULL,
  ticket_price_cents BIGINT NOT NULL,
  FOREIGN KEY (movie_id) REFERENCES movies(id),
  FOREIGN KEY (auditorium_id) REFERENCES auditoriums(id)
);

-- Таблица бронирований (reservations)
CREATE TABLE reservations (
  id CHAR(36) PRIMARY KEY,
  user_id CHAR(36) NOT NULL,
  showtime_id CHAR(36) NOT NULL,
  total_amount_cents BIGINT NOT NULL,
  currency CHAR(3) NOT NULL DEFAULT 'USD',
  status ENUM('confirmed','canceled','expired') DEFAULT 'confirmed',
  payment_status ENUM('pending','paid','failed','refunded') DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (showtime_id) REFERENCES showtimes(id)
);

-- Таблица мест, связанных с конкретной бронью
CREATE TABLE reservation_seats (
  reservation_id CHAR(36) NOT NULL,
  auditorium_seat_id CHAR(36) NOT NULL,
  showtime_id CHAR(36) NOT NULL,
  price_cents BIGINT NOT NULL,
  PRIMARY KEY (reservation_id, auditorium_seat_id),
  FOREIGN KEY (reservation_id) REFERENCES reservations(id) ON DELETE CASCADE,
  FOREIGN KEY (auditorium_seat_id) REFERENCES auditorium_seats(id) ON DELETE RESTRICT,
  FOREIGN KEY (showtime_id) REFERENCES showtimes(id) ON DELETE CASCADE
);

-- Таблица событий по броням (для логов)
CREATE TABLE reservation_events (
  id CHAR(36) PRIMARY KEY,
  reservation_id CHAR(36) NOT NULL,
  event_type ENUM('created','paid','canceled','refunded','expired') NOT NULL,
  event_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  details TEXT,
  FOREIGN KEY (reservation_id) REFERENCES reservations(id) ON DELETE CASCADE
);


-- Роли
INSERT INTO roles (id, name, description)
VALUES
  ('00000000-0000-0000-0000-000000000001', 'admin', 'Администратор'),
  ('00000000-0000-0000-0000-000000000002', 'user', 'Обычный пользователь');

-- Жанры
INSERT INTO genres (id, name, description)
VALUES
  ('00000000-0000-0000-0000-000000000101', 'Action', 'Action movies'),
  ('00000000-0000-0000-0000-000000000102', 'Comedy', 'Comedy movies'),
  ('00000000-0000-0000-0000-000000000103', 'Drama', 'Drama movies');

-- Модели сидений
INSERT INTO seat_models (id, name, text, is_vip)
VALUES
  ('00000000-0000-0000-0000-000000000201', 'Standard', 'Обычное место', FALSE),
  ('00000000-0000-0000-0000-000000000202', 'VIP', 'VIP место с доп. пространством', TRUE);
